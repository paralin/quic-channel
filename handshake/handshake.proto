syntax = "proto3";
package handshake;

import "github.com/fuserobotics/quic-channel/identity/identity.proto";
import "github.com/fuserobotics/quic-channel/signature/signature.proto";

// SessionInitChallenge challenges the client with a salt.
message SessionInitChallenge {
  // Timestamp is the time the server began the session.
  // In case of a dispute, the oldest session will be kept.
  uint64 timestamp = 1;
  // Challenge is the session challenge data.
  SessionChallenge challenge = 2;
}

// SessionInitResponse responds to the SessionInitChallenge.
message SessionInitResponse {
  // Signature is the signed SessionChallengeResponse, usually with a salt.
  signature.SignedMessage signature = 1;
  // Challenge is the second challenge step, if step 2
  SessionChallenge challenge = 2;
}

// SessionChallenge is the message the server asks the client to sign.
message SessionChallenge {
  // ChallengeNonce is a random bit string for the challenge.
  bytes challenge_nonce = 1;
}

// SessionChallengeResponse is the signed challenge response.
message SessionChallengeResponse {
  // Challenge is the challenge we are responding to repeated again.
  SessionChallenge challenge = 1;
  // Identity is the identity of the peer.
  identity.Identity identity = 2;
}