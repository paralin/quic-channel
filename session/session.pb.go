// Code generated by protoc-gen-go.
// source: github.com/fuserobotics/quic-channel/session/session.proto
// DO NOT EDIT!

/*
Package session is a generated protocol buffer package.

It is generated from these files:
	github.com/fuserobotics/quic-channel/session/session.proto

It has these top-level messages:
	PacketHeader
	StreamInit
	ControlSessionInit
	ControlKeepAlive
*/
package session

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// EStreamType are the types of a stream.
type EStreamType int32

const (
	// A control stream.
	EStreamType_STREAM_CONTROL EStreamType = 0
)

var EStreamType_name = map[int32]string{
	0: "STREAM_CONTROL",
}
var EStreamType_value = map[string]int32{
	"STREAM_CONTROL": 0,
}

func (x EStreamType) String() string {
	return proto.EnumName(EStreamType_name, int32(x))
}
func (EStreamType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// PacketHeader is the fixed-length header to a packet.
type PacketHeader struct {
	// Length of the following Control packet.
	PacketLength uint32 `protobuf:"fixed32,1,opt,name=packet_length,json=packetLength" json:"packet_length,omitempty"`
	// Packet type is the kind of the following packet.
	PacketType uint32 `protobuf:"fixed32,2,opt,name=packet_type,json=packetType" json:"packet_type,omitempty"`
}

func (m *PacketHeader) Reset()                    { *m = PacketHeader{} }
func (m *PacketHeader) String() string            { return proto.CompactTextString(m) }
func (*PacketHeader) ProtoMessage()               {}
func (*PacketHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PacketHeader) GetPacketLength() uint32 {
	if m != nil {
		return m.PacketLength
	}
	return 0
}

func (m *PacketHeader) GetPacketType() uint32 {
	if m != nil {
		return m.PacketType
	}
	return 0
}

// StreamInit initializes a stream.
// packet_type: 1, expected as first message on stream
type StreamInit struct {
	// Stream type is the kind of the stream.
	StreamType EStreamType `protobuf:"varint,1,opt,name=stream_type,json=streamType,enum=session.EStreamType" json:"stream_type,omitempty"`
}

func (m *StreamInit) Reset()                    { *m = StreamInit{} }
func (m *StreamInit) String() string            { return proto.CompactTextString(m) }
func (*StreamInit) ProtoMessage()               {}
func (*StreamInit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StreamInit) GetStreamType() EStreamType {
	if m != nil {
		return m.StreamType
	}
	return EStreamType_STREAM_CONTROL
}

// ControlSessionInit initializes the session.
// packet_type: 2, second message in first control stream.
// Completes the handshake for the session.
type ControlSessionInit struct {
	// Timestamp is the time the originator began the session.
	// In case of a dispute, the oldest session will be kept.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ControlSessionInit) Reset()                    { *m = ControlSessionInit{} }
func (m *ControlSessionInit) String() string            { return proto.CompactTextString(m) }
func (*ControlSessionInit) ProtoMessage()               {}
func (*ControlSessionInit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ControlSessionInit) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// ControlKeepAlive is a keep alive packet.
type ControlKeepAlive struct {
}

func (m *ControlKeepAlive) Reset()                    { *m = ControlKeepAlive{} }
func (m *ControlKeepAlive) String() string            { return proto.CompactTextString(m) }
func (*ControlKeepAlive) ProtoMessage()               {}
func (*ControlKeepAlive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*PacketHeader)(nil), "session.PacketHeader")
	proto.RegisterType((*StreamInit)(nil), "session.StreamInit")
	proto.RegisterType((*ControlSessionInit)(nil), "session.ControlSessionInit")
	proto.RegisterType((*ControlKeepAlive)(nil), "session.ControlKeepAlive")
	proto.RegisterEnum("session.EStreamType", EStreamType_name, EStreamType_value)
}

func init() {
	proto.RegisterFile("github.com/fuserobotics/quic-channel/session/session.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4b, 0xfb, 0x30,
	0x14, 0xc7, 0x7f, 0xfb, 0x21, 0x0e, 0x5f, 0xe7, 0x18, 0xc1, 0xc3, 0x0e, 0x82, 0x5a, 0x2f, 0x22,
	0xd8, 0xc2, 0xc4, 0x8b, 0xb7, 0x51, 0x06, 0x8a, 0xd3, 0x49, 0xdb, 0xfb, 0x48, 0xe3, 0x73, 0x0d,
	0xb6, 0x49, 0x4c, 0x5e, 0x85, 0xfd, 0xf7, 0xb2, 0xa4, 0x53, 0x4f, 0xc9, 0xf7, 0xc3, 0xe7, 0x7d,
	0x13, 0x1e, 0xdc, 0x6f, 0x24, 0xd5, 0x5d, 0x95, 0x08, 0xdd, 0xa6, 0xef, 0x9d, 0x43, 0xab, 0x2b,
	0x4d, 0x52, 0xb8, 0xf4, 0xb3, 0x93, 0xe2, 0x46, 0xd4, 0x5c, 0x29, 0x6c, 0x52, 0x87, 0xce, 0x49,
	0xad, 0xf6, 0x67, 0x62, 0xac, 0x26, 0xcd, 0x86, 0x7d, 0x8c, 0x4b, 0x18, 0xbd, 0x72, 0xf1, 0x81,
	0xf4, 0x80, 0xfc, 0x0d, 0x2d, 0xbb, 0x84, 0x63, 0xe3, 0xf3, 0xba, 0x41, 0xb5, 0xa1, 0x7a, 0x3a,
	0x38, 0x1f, 0x5c, 0x0d, 0xf3, 0x51, 0x80, 0x4b, 0xcf, 0xd8, 0x19, 0x44, 0xbd, 0x44, 0x5b, 0x83,
	0xd3, 0xff, 0x5e, 0x81, 0x80, 0xca, 0xad, 0xc1, 0x38, 0x03, 0x28, 0xc8, 0x22, 0x6f, 0x1f, 0x95,
	0x24, 0x76, 0x07, 0x91, 0xf3, 0x29, 0xe8, 0xbb, 0xc6, 0xf1, 0xec, 0x24, 0xd9, 0xff, 0x68, 0x11,
	0xd4, 0xdd, 0x60, 0x0e, 0xee, 0xe7, 0x1e, 0xcf, 0x80, 0x65, 0x5a, 0x91, 0xd5, 0x4d, 0x11, 0x4c,
	0x5f, 0x76, 0x0a, 0x47, 0x24, 0x5b, 0x74, 0xc4, 0x5b, 0xe3, 0xab, 0x0e, 0xf2, 0x5f, 0x10, 0x33,
	0x98, 0xf4, 0x33, 0x4f, 0x88, 0x66, 0xde, 0xc8, 0x2f, 0xbc, 0xbe, 0x80, 0xe8, 0xcf, 0x13, 0x8c,
	0xc1, 0xb8, 0x28, 0xf3, 0xc5, 0xfc, 0x79, 0x9d, 0xad, 0x5e, 0xca, 0x7c, 0xb5, 0x9c, 0xfc, 0xab,
	0x0e, 0xfd, 0x56, 0x6e, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x4d, 0xdc, 0x6c, 0x53, 0x01,
	0x00, 0x00,
}
