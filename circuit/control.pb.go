// Code generated by protoc-gen-go.
// source: github.com/fuserobotics/quic-channel/circuit/control.proto
// DO NOT EDIT!

package circuit

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/fuserobotics/quic-channel/route"
import identity "github.com/fuserobotics/quic-channel/identity"
import signature "github.com/fuserobotics/quic-channel/signature"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SessionInitChallenge challenges the client with a salt.
// packet_type: 2
type SessionInitChallenge struct {
	// Timestamp is the time the server began the session.
	// In case of a dispute, the oldest session will be kept.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Challenge is the session challenge data.
	Challenge *SessionChallenge `protobuf:"bytes,2,opt,name=challenge" json:"challenge,omitempty"`
}

func (m *SessionInitChallenge) Reset()                    { *m = SessionInitChallenge{} }
func (m *SessionInitChallenge) String() string            { return proto.CompactTextString(m) }
func (*SessionInitChallenge) ProtoMessage()               {}
func (*SessionInitChallenge) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SessionInitChallenge) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SessionInitChallenge) GetChallenge() *SessionChallenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

// SessionInitResponse responds to the SessionInitChallenge.
// packet_type: 3, third message in first control stream.
type SessionInitResponse struct {
	// Signature is the signed SessionChallengeResponse, usually with a salt.
	Signature *signature.SignedMessage `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	// Challenge is the second challenge step, if step 2
	Challenge *SessionChallenge `protobuf:"bytes,2,opt,name=challenge" json:"challenge,omitempty"`
}

func (m *SessionInitResponse) Reset()                    { *m = SessionInitResponse{} }
func (m *SessionInitResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionInitResponse) ProtoMessage()               {}
func (*SessionInitResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SessionInitResponse) GetSignature() *signature.SignedMessage {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SessionInitResponse) GetChallenge() *SessionChallenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

// SessionChallenge is the message the server asks the client to sign.
type SessionChallenge struct {
	// ChallengeNonce is a random bit string for the challenge.
	ChallengeNonce []byte `protobuf:"bytes,1,opt,name=challenge_nonce,json=challengeNonce,proto3" json:"challenge_nonce,omitempty"`
}

func (m *SessionChallenge) Reset()                    { *m = SessionChallenge{} }
func (m *SessionChallenge) String() string            { return proto.CompactTextString(m) }
func (*SessionChallenge) ProtoMessage()               {}
func (*SessionChallenge) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SessionChallenge) GetChallengeNonce() []byte {
	if m != nil {
		return m.ChallengeNonce
	}
	return nil
}

// SessionChallengeResponse is the signed challenge response.
type SessionChallengeResponse struct {
	// Challenge is the challenge we are responding to repeated again.
	Challenge *SessionChallenge `protobuf:"bytes,1,opt,name=challenge" json:"challenge,omitempty"`
	// Identity is the identity of the peer.
	Identity *identity.Identity `protobuf:"bytes,2,opt,name=identity" json:"identity,omitempty"`
}

func (m *SessionChallengeResponse) Reset()                    { *m = SessionChallengeResponse{} }
func (m *SessionChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionChallengeResponse) ProtoMessage()               {}
func (*SessionChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SessionChallengeResponse) GetChallenge() *SessionChallenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *SessionChallengeResponse) GetIdentity() *identity.Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

// ControlKeepAlive is a keep alive packet.
// packet_type: 4, sent periodically to hold the conn open.
type KeepAlive struct {
}

func (m *KeepAlive) Reset()                    { *m = KeepAlive{} }
func (m *KeepAlive) String() string            { return proto.CompactTextString(m) }
func (*KeepAlive) ProtoMessage()               {}
func (*KeepAlive) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func init() {
	proto.RegisterType((*SessionInitChallenge)(nil), "circuit.SessionInitChallenge")
	proto.RegisterType((*SessionInitResponse)(nil), "circuit.SessionInitResponse")
	proto.RegisterType((*SessionChallenge)(nil), "circuit.SessionChallenge")
	proto.RegisterType((*SessionChallengeResponse)(nil), "circuit.SessionChallengeResponse")
	proto.RegisterType((*KeepAlive)(nil), "circuit.KeepAlive")
}

func init() {
	proto.RegisterFile("github.com/fuserobotics/quic-channel/circuit/control.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x51, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0x25, 0x3f, 0x7e, 0xa8, 0xd9, 0x8a, 0xca, 0xea, 0x21, 0x16, 0x0f, 0x25, 0x17, 0x7b, 0x71,
	0x03, 0x15, 0x2a, 0xa8, 0x08, 0xe2, 0xa9, 0x88, 0x1e, 0xd2, 0x0f, 0x20, 0xe9, 0x76, 0x4c, 0x07,
	0x92, 0xd9, 0x98, 0x9d, 0x08, 0x9e, 0x05, 0x3f, 0xb7, 0xb4, 0x49, 0x36, 0xfe, 0xb9, 0x04, 0x2f,
	0xcb, 0xf0, 0xe6, 0xbd, 0x37, 0x6f, 0x76, 0xc4, 0x65, 0x8a, 0xbc, 0xaa, 0x16, 0x4a, 0x9b, 0x3c,
	0x7a, 0xae, 0x2c, 0x94, 0x66, 0x61, 0x18, 0xb5, 0x8d, 0x5e, 0x2a, 0xd4, 0x67, 0x7a, 0x95, 0x10,
	0x41, 0x16, 0x69, 0x2c, 0x75, 0x85, 0x1c, 0x69, 0x43, 0x5c, 0x9a, 0x4c, 0x15, 0xa5, 0x61, 0x23,
	0xb7, 0x1b, 0x78, 0x38, 0xed, 0x65, 0x52, 0x9a, 0x8a, 0xa1, 0x7e, 0x6b, 0x83, 0xe1, 0x75, 0x2f,
	0x1d, 0x2e, 0x81, 0x18, 0xf9, 0xcd, 0x15, 0x8d, 0xfa, 0xa6, 0x97, 0xda, 0x62, 0x4a, 0x09, 0x57,
	0x25, 0x74, 0x55, 0xad, 0x0f, 0x73, 0x71, 0x34, 0x07, 0x6b, 0xd1, 0xd0, 0x8c, 0x90, 0xef, 0x56,
	0x49, 0x96, 0x01, 0xa5, 0x20, 0x4f, 0x84, 0xcf, 0x98, 0x83, 0xe5, 0x24, 0x2f, 0x02, 0x6f, 0xe4,
	0x8d, 0xff, 0xc7, 0x1d, 0x20, 0x2f, 0x84, 0xaf, 0x5b, 0x6a, 0xf0, 0x6f, 0xe4, 0x8d, 0x07, 0x93,
	0x63, 0xd5, 0x7c, 0x84, 0x6a, 0xfc, 0x9c, 0x57, 0xdc, 0x71, 0xc3, 0x0f, 0x4f, 0x1c, 0x7e, 0x99,
	0x17, 0x83, 0x2d, 0x0c, 0x59, 0x90, 0x53, 0xe1, 0xbb, 0x64, 0x9b, 0x71, 0x83, 0x49, 0xa0, 0xba,
	0xac, 0x73, 0x4c, 0x09, 0x96, 0x0f, 0x60, 0x6d, 0xb2, 0xf6, 0x73, 0x8d, 0xbf, 0x07, 0xb9, 0x12,
	0x07, 0x3f, 0xdb, 0xf2, 0x54, 0xec, 0x3b, 0xc2, 0x13, 0x19, 0xd2, 0x75, 0x94, 0xdd, 0x78, 0xcf,
	0xc1, 0x8f, 0x6b, 0x34, 0x7c, 0xf7, 0x44, 0xf0, 0xcb, 0xbc, 0x5d, 0xe5, 0x5b, 0x24, 0xaf, 0x7f,
	0x24, 0xa9, 0xc4, 0x4e, 0x7b, 0xdc, 0x66, 0x15, 0xa9, 0xdc, 0xb5, 0x67, 0x4d, 0x11, 0x3b, 0x4e,
	0x38, 0x10, 0xfe, 0x3d, 0x40, 0x71, 0x9b, 0xe1, 0x2b, 0x2c, 0xb6, 0x36, 0xe7, 0x3c, 0xff, 0x0c,
	0x00, 0x00, 0xff, 0xff, 0x1b, 0x2e, 0x4c, 0xba, 0xcb, 0x02, 0x00, 0x00,
}
