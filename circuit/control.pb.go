// Code generated by protoc-gen-go.
// source: github.com/fuserobotics/quic-channel/circuit/control.proto
// DO NOT EDIT!

package circuit

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ControlSessionInit initializes the session.
// packet_type: 2, second message in first control stream.
// Completes the handshake for the session.
type ControlSessionInit struct {
	// Timestamp is the time the originator began the session.
	// In case of a dispute, the oldest session will be kept.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ControlSessionInit) Reset()                    { *m = ControlSessionInit{} }
func (m *ControlSessionInit) String() string            { return proto.CompactTextString(m) }
func (*ControlSessionInit) ProtoMessage()               {}
func (*ControlSessionInit) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ControlSessionInit) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// ControlKeepAlive is a keep alive packet.
type ControlKeepAlive struct {
}

func (m *ControlKeepAlive) Reset()                    { *m = ControlKeepAlive{} }
func (m *ControlKeepAlive) String() string            { return proto.CompactTextString(m) }
func (*ControlKeepAlive) ProtoMessage()               {}
func (*ControlKeepAlive) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*ControlSessionInit)(nil), "circuit.ControlSessionInit")
	proto.RegisterType((*ControlKeepAlive)(nil), "circuit.ControlKeepAlive")
}

func init() {
	proto.RegisterFile("github.com/fuserobotics/quic-channel/circuit/control.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2b, 0x2d, 0x4e, 0x2d, 0xca, 0x4f, 0xca, 0x2f,
	0xc9, 0x4c, 0x2e, 0xd6, 0x2f, 0x2c, 0xcd, 0x4c, 0xd6, 0x4d, 0xce, 0x48, 0xcc, 0xcb, 0x4b, 0xcd,
	0xd1, 0x4f, 0xce, 0x2c, 0x4a, 0x2e, 0xcd, 0x2c, 0xd1, 0x4f, 0xce, 0xcf, 0x2b, 0x29, 0xca, 0xcf,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x0a, 0x2b, 0x19, 0x71, 0x09, 0x39, 0x43,
	0x64, 0x82, 0x53, 0x8b, 0x8b, 0x33, 0xf3, 0xf3, 0x3c, 0xf3, 0x32, 0x4b, 0x84, 0x64, 0xb8, 0x38,
	0x4b, 0x32, 0x73, 0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82,
	0x10, 0x02, 0x4a, 0x42, 0x5c, 0x02, 0x50, 0x3d, 0xde, 0xa9, 0xa9, 0x05, 0x8e, 0x39, 0x99, 0x65,
	0xa9, 0x49, 0x6c, 0x60, 0x73, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x27, 0xd9, 0x7f, 0xc9,
	0x95, 0x00, 0x00, 0x00,
}
