syntax = "proto3";
package circuit;

import "github.com/fuserobotics/quic-channel/route/route.proto";
import "github.com/fuserobotics/quic-channel/identity/identity.proto";

// EStreamType are the types of Circuit streams.
enum EStreamType {
  // Control stream, used for control messages.
  STREAM_CONTROL = 0;
  // Circuit stream, used for building circuits.
  STREAM_CIRCUIT = 1;
}

// CircuitProbe is a probe to build a circuit.
// control packet_type: 5
message CircuitProbe {
  // Route contains the route so far.
  route.Route route = 1;
}

// CircuitPeerLookupRequest is a request for peer ids given in the last route probe.
// control+circuit packet_type: 6
message CircuitPeerLookupRequest {
  // QueryNonce is an identifier for the request.
  uint32 query_nonce = 1;
  // RequestedPeer are the peers in the list.
  repeated identity.PeerIdentifier requested_peer = 2;
}

// CircuitPeerLookupResponse is a response with peer identities.
// control+circuit packet_type: 7
message CircuitPeerLookupResponse {
  // QueryNonce is an identifier for the request.
  uint32 query_nonce = 1;
  // RequestedPeer are the peers in the list.
  repeated identity.Identity requested_peer = 2;
}

// CircuitInit is the first message on the circuit stream.
// circuit packet_type: 1
message CircuitInit {
  // RouteEstablish is the route establish chain.
  route.RouteEstablish route_establish = 1;
}

// CircuitPacket is a packet sent over the circuit.
// circuit packet_type 2
// - transported raw -

// CircuitEstablished is the ack that the circuit was successfully established.
// circuit packet_type 3
message CircuitEstablished {
  // FinalRouteEstablish contains the final signed route if necessary.
  route.RouteEstablish final_route_establish = 1;
}

// KeepAlive is a keep alive packet.
// control packet_type: 4, sent periodically to hold the conn open.
message KeepAlive {}